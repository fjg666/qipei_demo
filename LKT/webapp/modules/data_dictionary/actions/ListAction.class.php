<?phprequire_once(MO_LIB_DIR . '/DBAction.class.php');require_once(MO_LIB_DIR . '/ShowPager.class.php');require_once(MO_LIB_DIR . '/JurisdictionAction.class.php');require_once(MO_LIB_DIR . '/LaiKeLogUtils.class.php');class ListAction extends Action {    /**     * <p>Copyright (c) 2018-2019</p>     * <p>Company: www.laiketui.com</p>     * @author 段宏波     * @date 2018/12/12  18:54     * @version 1.0     */    public function getDefaultView() {        $db = DBAction::getInstance();        $request = $this->getContext()->getRequest();        $name = addslashes(trim($request->getParameter('name'))); // 数据名称        $pageto = $request -> getParameter('pageto');        // 导出        $pagesize = $request -> getParameter('pagesize');        $pagesize = $pagesize ? $pagesize:'10';        // 每页显示多少条数据        $page = $request -> getParameter('page');        // 页码        if($page){            $start = ($page-1)*$pagesize;        }else{            $start = 0;        }        $condition = " recycle = 0 ";        if($name != ''){            $condition .= " and name like '%$name%'";        }        $sql0 = "select * from lkt_data_dictionary_name where $condition";        $r0 = $db->select($sql0);        $total = count($r0);        $sql1 = "select * from lkt_data_dictionary_name where $condition order by add_date desc limit $start,$pagesize";        $r1 = $db->select($sql1);        if($r1){            foreach ($r1 as $k => $v){                $rew = Tools::test_data_dictionary_name($db,$v->id);                $r1[$k]->status_status = $rew;            }        }        $pager = new ShowPager($total,$pagesize,$page);        $url = "index.php?module=data_dictionary&action=List&name=".urlencode($name)."&pagesize=".urlencode($pagesize);        $pages_show = $pager->multipage($url,$total,$page,$pagesize,$start,$para = '');        $request->setAttribute("list",$r1);        $request -> setAttribute('name', $name);        $request -> setAttribute('pages_show', $pages_show);        return View :: INPUT;    }    public function execute() {        $db = DBAction::getInstance();        $JurisdictionAction = new JurisdictionAction();        $lktlog = new LaiKeLogUtils("common/data_dictionary.log");        // 1.开启事务        $db->begin();        $request = $this->getContext()->getRequest();        $store_id = $this->getContext()->getStorage()->read('store_id');        $admin_name = $this->getContext()->getStorage()->read('admin_name');        $id = addslashes(trim($request->getParameter('id'))); // id        $sql0 = "select * from lkt_data_dictionary_name where id = '$id'";        $r0 = $db->select($sql0);        if($r0){            $status = $r0[0]->status;            if($status == 0){                $sql1 = "update lkt_data_dictionary_name set status = 1 where id = '$id'";                $r1 = $db->update($sql1);                if($r1 == -1){                    $JurisdictionAction->admin_record($store_id,$admin_name,'开启数据字典名称ID为'.$id.'失败',5);                    $Log_content = __METHOD__ . '->' . __LINE__ . ' 开启数据字典名称ID为'.$id.'失败 ';                    $lktlog->customerLog($Log_content);                    $db->rollback();                    echo json_encode(array('status' => '未知原因，开启失败！'));exit;                }else{                    $JurisdictionAction->admin_record($store_id,$admin_name,'开启数据字典名称ID为'.$id.'成功',5);                    $Log_content = __METHOD__ . '->' . __LINE__ . ' 开启数据字典名称ID为'.$id.'成功 ';                    $lktlog->customerLog($Log_content);                    $db->commit();                    echo json_encode(array('status' =>'开启成功！' ,'suc'=>'1'));exit;                }            }else{                $sql1 = "update lkt_data_dictionary_name set status = 0 where id = '$id'";                $r1 = $db->update($sql1);                if($r1 == -1){                    $JurisdictionAction->admin_record($store_id,$admin_name,'关闭数据字典名称ID为'.$id.'失败',5);                    $Log_content = __METHOD__ . '->' . __LINE__ . ' 关闭数据字典名称ID为'.$id.'失败 ';                    $lktlog->customerLog($Log_content);                    $db->rollback();                    echo json_encode(array('status' => '未知原因，关闭失败！'));exit;                }else{                    $JurisdictionAction->admin_record($store_id,$admin_name,'关闭数据字典名称ID为'.$id.'成功',5);                    $Log_content = __METHOD__ . '->' . __LINE__ . ' 关闭数据字典名称ID为'.$id.'成功 ';                    $lktlog->customerLog($Log_content);                    $db->commit();                    echo json_encode(array('status' =>'关闭成功！' ,'suc'=>'1'));exit;                }            }        }else{            $JurisdictionAction->admin_record($store_id,$admin_name,'开启/关闭数据字典名称ID为'.$id.'失败',5);            $Log_content = __METHOD__ . '->' . __LINE__ . ' 开启/关闭数据字典名称ID为'.$id.'失败 ';            $lktlog->customerLog($Log_content);            $db->rollback();            echo json_encode(array('status' =>'操作失败！'));exit;        }    }    public function getRequestMethods(){        return Request :: POST;    }}?>